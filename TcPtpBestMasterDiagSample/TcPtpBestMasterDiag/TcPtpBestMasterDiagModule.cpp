///////////////////////////////////////////////////////////////////////////////
// TcPtpBestMasterDiagModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "TcPtpBestMasterDiagModule.h"
#include "TcPtpBestMasterDiagVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CTcPtpBestMasterDiagModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CTcPtpBestMasterDiagModule
BEGIN_INTERFACE_MAP(CTcPtpBestMasterDiagModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CTcPtpBestMasterDiagModule, VID_TcPtpBestMasterDiag, CID_TcPtpBestMasterDiagCTcPtpBestMasterDiagModule)
IMPLEMENT_ITCOMOBJECT(CTcPtpBestMasterDiagModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CTcPtpBestMasterDiagModule)
IMPLEMENT_ITCADI(CTcPtpBestMasterDiagModule)
IMPLEMENT_ITCWATCHSOURCE(CTcPtpBestMasterDiagModule)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CTcPtpBestMasterDiagModule 
BEGIN_SETOBJPARA_MAP(CTcPtpBestMasterDiagModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_TcPtpBestMasterDiagModulePTP, m_spPTP)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CTcPtpBestMasterDiagModule 
BEGIN_GETOBJPARA_MAP(CTcPtpBestMasterDiagModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_TcPtpBestMasterDiagModulePTP, m_spPTP)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CTcPtpBestMasterDiagModule
BEGIN_OBJPARAWATCH_MAP(CTcPtpBestMasterDiagModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CTcPtpBestMasterDiagModule
BEGIN_OBJDATAAREA_MAP(CTcPtpBestMasterDiagModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CTcPtpBestMasterDiagModule::CTcPtpBestMasterDiagModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_spCyclicCaller{}
	, m_spPTP{}
	, m_spADI{}
	, m_pBestMasterInputs(nullptr)
	, m_nBestMasterCycle(0)
	//, m_pPort1Inputs(nullptr)
	//, m_nPort1Cycle(0)
	//, m_pPort2Inputs(nullptr)
	//, m_nPort2Cycle(0)
	, m_pDeviceInputs(nullptr)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
///</AutoGeneratedContent>
	memset(&m_mBestMasterDiag, 0, sizeof(m_mBestMasterDiag));
	//memset(&m_mPort1Diag, 0, sizeof(m_mPort1Diag));
	//memset(&m_mPort2Diag, 0, sizeof(m_mPort2Diag));
}

///////////////////////////////////////////////////////////////////////////////
CTcPtpBestMasterDiagModule::~CTcPtpBestMasterDiagModule()
{
	m_spCyclicCaller.Release();
	m_spPTP.Release();
	m_spADI.Release();
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CTcPtpBestMasterDiagModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CTcPtpBestMasterDiagModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	if (FAILED(hr)) {
		m_Trace.Log(tlError, "Evaluate InitData failed! HR=0x%08X", hr);
		return hr;
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CTcPtpBestMasterDiagModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	m_spCyclicCaller.Release();
	m_spPTP.Release();
	m_spADI.Release();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CTcPtpBestMasterDiagModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	if (!m_spPTP.HasOID()) {
		m_Trace.Log(tlError, "Object ID of PTP Module undefined!");
		return hr;
	}

	hr = m_spSrv->TcQueryObjectInterface(m_spPTP.GetOID(), m_spPTP.GetIID(), reinterpret_cast<PPVOID>(&m_spPTP));
	if (FAILED(hr)) {
		m_Trace.Log(tlError, "Query Object Interface of PTP Module failed! HR=0x%08X", hr);
		return hr;
	}

	hr = m_spPTP->TcQueryInterface(m_spADI.GetIID(), reinterpret_cast<PPVOID>(&m_spADI));
	if (FAILED(hr)) {
		m_Trace.Log(tlError, "Query ADI Interface of PTP Module failed! HR=0x%08X", hr);
		return hr;
	}

	//hr = m_spADI->GetImagePtr(sizeof(*m_pPort1Inputs), 0, 0, reinterpret_cast<PPVOID>(&m_pPort1Inputs));
	//if (FAILED(hr)) {
	//	m_Trace.Log(tlError, "Query Data Area \"Port 1 Inputs\" failed! HR = 0x % 08X", hr);
	//	return hr;
	//}

	//hr = m_spADI->GetImagePtr(sizeof(*m_pPort2Inputs), 23, 0, reinterpret_cast<PPVOID>(&m_pPort2Inputs));
	//if (FAILED(hr)) {
	//	m_Trace.Log(tlError, "Query Data Area \"Port 2 Inputs\" failed! HR = 0x % 08X", hr);
	//	return hr;
	//}

	hr = m_spADI->GetImagePtr(sizeof(*m_pBestMasterInputs), 46, 0, reinterpret_cast<PPVOID>(&m_pBestMasterInputs));
	if (FAILED(hr)) {
		m_Trace.Log(tlError, "Query Data Area \"Best Master Inputs\" failed! HR = 0x % 08X", hr);
		return hr;
	}

	hr = m_spADI->GetImagePtr(sizeof(*m_pDeviceInputs), 69, 0, reinterpret_cast<PPVOID>(&m_pDeviceInputs));
	if (FAILED(hr)) {
		m_Trace.Log(tlError, "Query Data Area \"Device Inputs\" failed! HR = 0x % 08X", hr);
		return hr;
	}

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller();

	// Cleanup if transition failed at some stage
	if (FAILED(hr))
	{
		RemoveModuleFromCaller();
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CTcPtpBestMasterDiagModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller();

	if (m_spADI)
	{
		//if (m_pPort1Inputs != nullptr) {
		//	m_spADI->ReleaseImagePtr(m_pPort1Inputs);
		//	m_pPort1Inputs = nullptr;
		//}
		//if (m_pPort2Inputs != nullptr) {
		//	m_spADI->ReleaseImagePtr(m_pPort2Inputs);
		//	m_pPort2Inputs = nullptr;
		//}
		if (m_pBestMasterInputs != nullptr) {
			m_spADI->ReleaseImagePtr(m_pBestMasterInputs);
			m_pBestMasterInputs = nullptr;
		}
		if (m_pDeviceInputs != nullptr) {
			m_spADI->ReleaseImagePtr(m_pDeviceInputs);
			m_pDeviceInputs = nullptr;
		}
		m_spADI.Release();
	}
	m_spPTP.Release();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CTcPtpBestMasterDiagModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// if port 1 inputs are available and have changed, update diag data
	//if (m_pPort1Inputs != nullptr && m_pPort1Inputs->Sync_Cycle_Counter != m_nPort1Cycle)
	//{
	//	ULONG nData = sizeof(m_mPort1Diag);
	//	PVOID pData = &m_mPort1Diag;
	//	hr = m_spPTP->TcGetObjPara(0x03142004, nData, pData);
	//	if (FAILED(hr)) {
	//		m_Trace.Log(tlError, "Get Para \"Port 1 Diag\" failed! HR = 0x % 08X", hr);
	//		return hr;
	//	}
	//	m_nPort1Cycle = m_pPort1Inputs->Sync_Cycle_Counter;
	//}

	// if port 2 inputs are available and have changed, update diag data
	//if (m_pPort2Inputs != nullptr && m_pPort2Inputs->Sync_Cycle_Counter != m_nPort2Cycle)
	//{
	//	ULONG nData = sizeof(m_mPort2Diag);
	//	PVOID pData = &m_mPort2Diag;
	//	hr = m_spPTP->TcGetObjPara(0x03142104, nData, pData);
	//	if (FAILED(hr)) {
	//		m_Trace.Log(tlError, "Get Para \"Port 2 Diag\" failed! HR = 0x % 08X", hr);
	//		return hr;
	//	}
	//	m_nPort2Cycle = m_pPort2Inputs->Sync_Cycle_Counter;
	//}

	if (m_pBestMasterInputs != nullptr && m_pBestMasterInputs->Sync_Cycle_Counter != m_nBestMasterCycle)
	{
		ULONG nData = sizeof(m_mBestMasterDiag);
		PVOID pData = &m_mBestMasterDiag;
		if (m_pDeviceInputs != nullptr) {
			switch (m_pDeviceInputs->Best_Master_Port)
			{
				case 1:
					hr = m_spPTP->TcGetObjPara(0x03142004, nData, pData);
					break;
				case 2:
					hr = m_spPTP->TcGetObjPara(0x03142104, nData, pData);
					break;
				default:
					hr = ADS_E_INVALIDSTATE;
					break;
			}
			if (FAILED(hr)) {
				m_Trace.Log(tlError, "Get Para \"Best Master Diag\" failed! HR = 0x % 08X", hr);
				return hr;
			}
		}
		m_nBestMasterCycle = m_pBestMasterInputs->Sync_Cycle_Counter;
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CTcPtpBestMasterDiagModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if (m_spCyclicCaller.HasOID())
	{
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)))
		{
			if (FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))))
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID;
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CTcPtpBestMasterDiagModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spCyclicCaller)
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

